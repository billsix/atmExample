\input texinfo_times.tex
@setfilename spring.info
@settitle Introduction to the Spring Framework
@paragraphindent 1
@tex
\global\bindingoffset=0.00in
\global\normaloffset =0.00in
@end tex
@dircategory Spring Framework
@direntry
* Spring Framework: (spring).                 Spring Framework
@end direntry
@set xref-automatic-section-title
@smallbook
@set EDITION 1.0
@set VERSION 2.0.x
@set UPDATED 2007-06-03
@set ISBN X-XXXXXX-XX-X
@titlepage
@sp 
@title Introduction to the Spring Framework
@subtitle For Spring version @value{VERSION}
@sp 4
@author by Bill Six
@page
@vskip 0pt plus 1filll
This manual documents the Spring Framework version @value{VERSION}.
@sp2
@multitable @columnfractions .50 .50
@item Published by:              @tab
@item @tab
@item Bill Six Press                  
@end multitable
@sp 2
Copyright @copyright{} 2007 Bill Six
@sp 1
Permission is granted to copy, distribute and/or modify this document
under the terms of the @acronym{GNU} Free Documentation License,
Version 1.2, or any later version published by the Free Software
Foundation.
@end titlepage
@page
@contents
@headings off
@iftex
@shorttitlepage Introduction to the Spring Framework
@end iftex
@headings on

@node Introduction
@chapter Introduction
@c %MENU% Purpose of the Spring Framework
The Spring Framework is an excellent library for the Java programming language
that promotes flexible, layered enterprise application development.  The Spring Framework
allows developers to freely create their own domain model, while easily integrating their domain
model into the Service Layer and Data Access Layer.  Furthermore, Spring facilitates integration of the domain model 
with standard JavaEE services which were previously accomplished by using Enterprise JavaBeans; 
such as JTA, and asynchronous JMS subscribers, 


While a plethora of documentation regarding Spring exists in books and on the web, most of it emphasizes the use of an XML-based 
ApplicationContext for the purpose of Depedency Injection and Aspect Oriented Programming.  Dependency Injection 
allows a developer to seperate configuration of services from their use.  While Dependency Injection  may be appealing in 
certain contexts @footnote{See http://www.martinfowler.com/articles/injection.html }, 
it is not a prerequisite for separating configuration from use.  Aspect Oriented Programming is primarily used as a technique
for intercepting method calls to the Service Layer and Data Access Layer, allowing a developer to code cross cutting concerns
such as transaction management, authentication, or logging, without forcing the developer to copy the same 
boilerplate code repeatedly across each class in those layers.  The goals of Dependency Injection and AOP have merit.  


With that said, the Service Locater pattern can be used instead of Dependency Injection, and 
cross cutting concerns can be addressed in a more intuitive manner by using method interception libraries.  More importantly, the Service Locator
pattern and method interception are easily implemented in pure Java instead of relying on a Dependency Injection container.

@node Getting Started,  , Introduction
@section Getting Started

This manual is written with the assumption that you are at least
somewhat familiar with the Java programming language and basic
programming concepts.  Additionally, it is assumed that you have read Martin Fowler's 
@emph{Patterns of Enterprise Application Architecture} (Addison-Wesley Professional, November 5, 2002), @uref{http://www.martinfowler.com/books.html#eaa}
, and Christian Bauer's and Gavin King's @emph{Hibernate in Action} (Manning Publications, August 1, 2004), @uref{http://www.manning.com/bauer/}

@node Method Interception 
@chapter Method Interception 
@c %MENU% Method Interception

Before getting Spring's integration with Data Access technologies and transaction management, it's important to understand what
method interception is and how to use dynamic proxies.  If the reader wants to get up and running quickly with Spring, 
he should only read the first section.  The second section is on another form of dynamic proxies, called Introductions.

@node Dynamic Proxies,  , Method Interception 
@section Dynamic Proxies

Dynamic languages such as Smalltalk-80, Objective C, and relative new-comer Ruby, are object-oriented, message-passing 
languages which allow an object to inspect messages that are passed to it.  If the object receiving the message 
does not have a method which corresponds to the message, the object can decide what to
do with the message.  This feature allows a developer to create proxy objects which forward these messages
to another object.

@node Proxy Example - Smalltalk-80
@subsection Proxy Example - Smalltalk-80

The following Smalltalk class prints out ``forwaring the message'' before the message is passed onto the
proxy's target.


@smallexample
 ProtoObject subclass: #CustomProxyClass
   instanceVariableNames: 'target'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Examples'
  
 initializeTarget: t 
   target := t

 doesNotUnderstand: aMessage 
   Transcript show: 'forwaring the message'; cr.
   ^ target perform: aMessage selector withArguments: aMessage arguments

@end smallexample


@node Dynamic Proxy Example - Spring
@subsection Dynamic Proxy Example - Spring

Java does not allow the the inspection and redirection of MethodInvocations in the same manner, as that would 
violate the type safety of the class.  However, in order to get around this limitation, 
 JDK 1.4 introduced the notion of dynamic proxies.  A dynamic proxy is a Java class 
which, at runtime, can be configured as a proxy to any number of Java interfaces: thus allowing safe type-casting of the proxy object 
to a target interface.  Around the same time, an open source project called CGLIB was created,
allowing similar proxying behavior via byte-code enhancement.  The additional benefit of CGLIB is that it allows a developer
to dynamically proxy Java classes as well as interfaces.


Assume that you are working on a Calculator Service which adds two numbers together.  
Assume that the user must log in to the system before
accessing the Calculator Service.  There are two acceptance test cases for this story.  In the first, a user is
denied access to a Calculator Service before the user provides it with a valid username/password pair.  In the second,
a user supplies a correct username/password pair to the Calculator Service, after which he is able to add the 
two numbers.

@smallexample
public void testInvalidAccess() @{
    try@{
       _calculatorService.add(4,5);
        fail("The user did not log in yet");
    @} catch(IllegalStateException ise) @{
    @}
@}

public void testValidAccess() @{
   try@{
        _calculatorService.authenticate("","");
        assertTrue(_calculatorService.add(4,5) == 9);
    @} catch(IllegalStateException ise) @{
        fail("The user did log in correctly");
    @}
@}
@end smallexample


The first step in implementing this story is by creating an Authenticatable interface
with the following methods:
@smallexample
public interface Authenticatable @{    
    public void authenticate(String username, String password);
    public boolean isValidUser();
@}
@end smallexample

The second step is to create a Calculator Service
 
@smallexample
public interface CalculatorService extends Authenticatable @{    
    public Integer add(Integer first, Integer second);
@}
@end smallexample



The implementation of CalculatorService could be implemented by making the add() 
method check to make sure the user has an authenticated account.  This would mean that
any additional methods added to the CalculatorService would need to do the same thing at the beginning
of each method.  This is the exact 
situation where dynamic proxies are useful.  You could create a 
dynamic proxy which inspects incoming MethodInvocations, initially only forwarding an  ``authenticate''  method call
to the target, while throwing an InvalidStateException on any other method call.  Once the user 
is authenticated, the proxy will then happily forward along all MethodInvocations and return their results.

@smallexample
public class AuthenticationInterceptor implements MethodInterceptor
@{
    public Object invoke(MethodInvocation invocation) throws Throwable
    @{
        Method method = invocation.getMethod();
        Authenticatable authenticatable = (Authenticatable) invocation.getThis();
        if(method.equals(Authenticatable.class.getMethod("authenticate", String.class, String.class)) ) @{
            return invocation.proceed();
        @} else if( authenticatable.isValidUser())@{
            return invocation.proceed();
        @}
        throw new IllegalStateException("User is not authenticated");    
    @}
@}
@end smallexample

This allows the CalculatorService to be implemented as follows

@smallexample
public class CalculatorServiceImplementation implements CalculatorService @{    
    public void authenticate(String username, String password) @{
        _isAuthenticated = true;
    @}
    public boolean isValidUser() @{
        return _isAuthenticated;
    @}    
    public Integer add(Integer first, Integer second) @{
        return first + second;
    @}
    private boolean _isAuthenticated = false;
@}
@end smallexample

Finally, the unit test will need to create dynamic proxy before the unit tests are executed

@smallexample
public class CalculatorServiceTest extends TestCase @{
    public CalculatorServiceTest( String testName ) @{
        super( testName );
    @}    
    public static Test suite() @{
        return new TestSuite( CalculatorServiceTest.class );
    @}    
    public void setUp() throws Exception@{
        CalculatorServiceImplementation target = new CalculatorServiceImplementation();
        ProxyFactoryBean factory = new ProxyFactoryBean();
        factory.addAdvice(new AuthenticationInterceptor());
        factory.setTarget(target);
        factory.setProxyInterfaces(new Class[]@{CalculatorService.class@});
        _calculatorService = (CalculatorService) factory.getObject();
    @}    
    public void testInvalidAccess() @{
        try@{
            _calculatorService.add(4,5);
            fail("The user did not log in yet");
        @} catch(IllegalStateException ise) @{
        @}
    @}
    public void testValidAccess() @{
        try@{
            _calculatorService.authenticate("","");
            assertTrue(_calculatorService.add(4,5) == 9);
        @} catch(IllegalStateException ise) @{
            fail("The user did log in correctly");
        @}
    @}    
    CalculatorService _calculatorService ;
@}
@end smallexample



@node Introductions,  , Method Interception 
@section Introductions

While the dynamic proxy solution for the Authenticatable interface would work, any other services
which implement the Authenticatable interface would be forced to implement the same logic.  
One solution to avoid
rewriting the same logic repeatedly would be to create a Layer Supertype which has the Authenticatable 
implementation.  Since all services in the Service Layer subclass the Layer Supertype, they will all be
Authenticatable.  

Another alternative is to use Introductions.  Introductions are form of dynamic proxies that 
lets the proxy class itself provide the implemention of an interface,
while forwarding all other method calls to the target.  Introductions have an advantage over the Layer Supertype in the sense 
that you are not forced to artifically create a class inheritence hierarchy.

@node Introduction Example - Spring
@subsection Introduction Example - Spring


The CalculatorService interface no longer needs to extend the Authenticatable interface:

@smallexample
 public interface CalculatorService @{    
    public Integer add(Integer first, Integer second);
 @}
@end smallexample

The CalculatorServiceImplementation only needs the methods necessary for the CalculatorService interface.

@smallexample
public class CalculatorServiceImplementation implements CalculatorService@{    
    public Integer add(Integer first, Integer second) @{
        return first + second;
    @}
@}
@end smallexample

The Authenticatable interface can be implemented by the dynamic proxy itself, as follows


@smallexample
public class AuthenticatableIntroductionInterceptor extends DelegatingIntroductionInterceptor implements Authenticatable@{    
    public void authenticate(String username, String password) @{
        _isAuthenticated = true;
    @}
    public boolean isValidUser() @{
        return _isAuthenticated;
    @}    
    public Object invoke(MethodInvocation invocation) throws Throwable @{
        Method method = invocation.getMethod();
        if(!isValidUser() && !method.equals(Authenticatable.class.getMethod("authenticate", String.class, String.class))) @{
            throw new IllegalStateException("User is not authenticated");
        @}
        return super.invoke(invocation);
    @}    
    private boolean _isAuthenticated = false;
@}
@end smallexample

Spring requires that this class is wrapped in an IntroductionAdvisor, specifying the interface that is introduced.

@smallexample
public class AuthenticatableIntroductionAdvisor extends DefaultIntroductionAdvisor@{
    public AuthenticatableIntroductionAdvisor() @{
        super(new AuthenticatableIntroductionInterceptor(), Authenticatable.class);
    @}
@}
@end smallexample


The CalculatorServiceTest is modified as follows:
@smallexample
    public void setUp() throws Exception@{
        CalculatorServiceImplementation target = new CalculatorServiceImplementation();
        ProxyFactoryBean factory = new ProxyFactoryBean();
        factory.addAdvisor(new AuthenticatableIntroductionAdvisor());
        factory.setTarget(target);
        factory.setProxyInterfaces(new Class[]{CalculatorService.class, Authenticatable.class});
        _calculatorService = (CalculatorService) factory.getObject();
    @}    
    public void testInvalidAccess() @{
        try@{
            _calculatorService.add(4,5);
            fail("The user did not log in yet");
        @} catch(IllegalStateException ise) @{
        @}
    @}    
    public void testValidAccess() @{
        ((Authenticatable)_calculatorService).authenticate("","");
        assertTrue(_calculatorService.add(4,5) == 9);
    @}
@end smallexample

Introductions are roughly, but not exactly, analogous to mixins in Ruby.  Introductions, like mixins, can 
be great if you're only using one Introduction
to proxy a class.  However, it gets more complicated once multiple Introductions are mixed 
in when they have one or more identical method signatures in their interfaces.
This is because Introductions are dynamic proxies which are mixed-in in a linear order.  
If multiple Introductions have non-unique method signatures, the first Introduction
that is mixed-in will have it's method shadowed because the other proxy that was mixed-in afterwards 
will intercept the method call before it.  
I do not know of a good solution to this issue in Java.  If you decide to use Introductions in your
Service Layer, ensure that each Introduction's interfaces have distinct method signatures.  



@node Proxy Example - Smalltalk-80
@subsection Proxy Example - Smalltalk-80


While this may be a relatively new feature for Java, this is easily implemented in a pure message-passing language such
as Smalltalk.


@smallexample
 ClassTestCase subclass: #AuthenticatableProxyTest
  instanceVariableNames: 'calculatorService'
  classVariableNames: ''
  poolDictionaries: ''
  category: 'CalculatorService'

 setUp
  calculatorService := AuthenticatableProxy target: CalculatorService new'

 testInvalidAccess
  self
    should: [calculatorService add: 1 and: 2]
    raise: MessageNotUnderstood

 testValidAccess
  calculatorService authenticateUsername: '' Password: ''.
  self assert: ((calculatorService add: 1 and: 2) = 3)

 Object subclass: #CalculatorService
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''
  category: 'CalculatorService'

 add: first and: second 
  ^ first + second

 ProtoObject subclass: #AuthenticatableProxy
  instanceVariableNames: 'target isAuthenticated'
  classVariableNames: ''
  poolDictionaries: ''
  category: 'CalculatorService'

 initializeTarget: t 
  target := t

 authenticateUsername: u Password: p 
  isAuthenticated := true

 isValidUser
  ^ isAuthenticated

 doesNotUnderstand: aMessage 
  self isValidUser not
    ifTrue: [^ super doesNotUnderstand: aMessage].
  ^ target perform: aMessage selector withArguments: aMessage arguments

@end smallexample

On a side note, a technique for fine-grained code reuse was developed for the Squeak dialect of 
Smalltalk-80 that is not implemented using multiple-inheritance or proxies, called Traits.  For more 
information about Traits, the reader should consult Stephane Ducasse's, et. al.,  paper called 
``Traits: A mechanism for fine-grained reuse''. 

@node Data Access Layer 
@chapter Data Access Layer
@c %MENU% Data Access 

Spring integrates with many different data access technologies, from full fledged object-relational mappers like
Hibernate and the Java Persistence API, to lighter weight solutions like iBatis or JDBC.  
The reader should consult PoEAA to see the different types of data access strategies.  I'm an object bigot,
so I prefer a beastly domain model that is persisted using a Data Mapper; as such I find myself frequently
using Hibernate for my data access needs. 

Spring doesn't try to reinvent the wheel when it comes to Data Access frameworks; Spring opts instead just to integrate
with many popular data access frameworks.  Spring's main contribution to
the Data Access Layer is that it catches all Exceptions that are thrown and casts them into Spring's own DataAccessExceptions.  This
allows exception handling code in your Service Layer to remain data-access technology agnostic.


@node Data Mappers,  , Data Access Layer 
@section Data Mappers

The following is a Layer Supertype for Hibernate based DataMappers which uses Java 5's generics
so that subclasses can inherit each method without needing type-casts.

@smallexample
public class HibernateBaseDataMapper<T> implements BaseDataMapper<T>@{
    public HibernateBaseDataMapper() @{
        _persistentClass =  (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];
    @}
    public T load(Long id) @{
        T entity = (T) _sessionFactory.getCurrentSession().load(_persistentClass, id);
        Hibernate.initialize(entity);
        return entity;
    @}
    public List<T> findAll() @{
        return findByCriteria();
    @}
    protected List<T> findByExample(T exampleInstance, String[] excludeProperty) @{
        Criteria crit = _sessionFactory.getCurrentSession().createCriteria(_persistentClass);
        Example example =  Example.create(exampleInstance);
        for (String exclude : excludeProperty) @{
            example.excludeProperty(exclude);
        @}
        crit.add(example);
        return crit.list();
    @}
    protected List<T> findByCriteria(Criterion... criterion) @{
        Criteria crit = _sessionFactory.getCurrentSession().createCriteria(_persistentClass);
        for (Criterion c : criterion) @{
            crit.add(c);
        @}
        return crit.list();
    @}
    public T saveOrUpdate(T entity) @{
        _sessionFactory.getCurrentSession().saveOrUpdate(entity);
        return entity;
    @}
    public void delete(T entity) @{
        _sessionFactory.getCurrentSession().delete(entity);
    @}
    public void flush() @{
        _sessionFactory.getCurrentSession().flush();
    @}
    public void clear() @{
        _sessionFactory.getCurrentSession().clear();
    @}
    public void setSessionFactory(SessionFactory sessionFactory) @{
        _sessionFactory = sessionFactory;
    @}
    protected SessionFactory _sessionFactory ;
    private Class<T> _persistentClass;
@}
@end smallexample

Concrete subclasses can inherit the base functionality, while adding
its own functionality.

@smallexample
public class HibernateAccountDataMapper extends HibernateBaseDataMapper<Account> implements AccountDataMapper@{
    public HibernateAccountDataMapper() @{
    @}
    public Account load(final String username) @{        
        Account toReturn = (Account) _sessionFactory.getCurrentSession()
                .createQuery("from Account as account where account._username like :username")
                .setParameter("username", username, Hibernate.STRING)
                .uniqueResult();        
        if(toReturn == null) @{
            throw new DataRetrievalFailureException("No user with name " + username + " exists");
        @}
        return toReturn;
    @}
    public Account fetchAccountTransactions(final Account account) @{
        Hibernate.initialize(account.getTransactionHistory());
        return account;
    @}
@}
@end smallexample


@node Configuration,  , Data Access Layer 
@section Configuration


These DataMappers need to connect to a datasource and take place in a transactional context.  
Instead of using an XML-based ApplicationContext, this can be implemented in pure Java
by using a Service Locator.


Hibernate needs a data source to connect to:
@smallexample
private BasicDataSource _dataSource ;
private void initializeDataSource() @{
  _dataSource = new BasicDataSource();
  _dataSource.setDriverClassName("org.postgresql.Driver");
  _dataSource.setUrl("jdbc:postgresql://localhost/hibernatetest");
  _dataSource.setUsername("wsix");
  _dataSource.setPassword("password");
@}
@end smallexample




Spring uses a LocalSessionFactoryBean to create a Hibernate SessionFactory.
@smallexample
private LocalSessionFactoryBean _localSessionFactoryBean;
private void initializeSessionFactory() throws Exception @{
  _localSessionFactoryBean = new LocalSessionFactoryBean();
  Properties hibernateProperties = new Properties();
  hibernateProperties.setProperty(
       "hibernate.dialect","org.hibernate.dialect.PostgreSQLDialect");
  _localSessionFactoryBean.setDataSource(_dataSource);
  _localSessionFactoryBean.setMappingResources(
       new String[]@{"com/billsix/examples/atm/DomainObjects.hbm.xml"@});
  _localSessionFactoryBean.setHibernateProperties(hibernateProperties);
  _localSessionFactoryBean.afterPropertiesSet();
@}
public void dropAndCreateSchemas() @{
  _localSessionFactoryBean.dropDatabaseSchema();
  _localSessionFactoryBean.createDatabaseSchema();
@}
@end smallexample



Here we create the HibernateAccountDataMapper.  Spring is able to catch and rethrow HibernateExceptions
as Spring's DataAccessExceptions because the SessionFactory that is set on the HibernateAccountDataMapper
is a dynamic proxy of Hibernate's SessionFactory.
@smallexample
private AccountDataMapper _accountDataMapper;
private void initializeAccountDataMapper() throws BeanInitializationException, IllegalArgumentException @{
  HibernateAccountDataMapper hibernateAccountDataMapper = 
                              new HibernateAccountDataMapper();
  hibernateAccountDataMapper.setSessionFactory(
                (SessionFactory)_localSessionFactoryBean.getObject());
  _accountDataMapper = hibernateAccountDataMapper;
  addTransactionInterceptorToAccountDataMapper();          
@}
public  AccountDataMapper getAccountDataMapper() @{
  return _accountDataMapper;
@}
@end smallexample




This brings me to my one complaint with Spring's design.  Each of these objects have empty constructors,
and properties must be set using setter methods.  After all of the required properties are set, afterPropertiesSet()
must be called.  I would prefer if Spring exposed constructors that took in the required properties, and within the
constructor, afterPropertiesSet() would be called.  This would guarantee that objects are initialized correctly,
and would cut down on the amount of code needed within the Service Locator.


      

@node Service Layer
@chapter Service Layer
@c %MENU% Service Layer

The Service Layer is where Spring's main strengths lie.  Dynamic Proxies and Introductions are most useful at this layer,
where there is normally a lot of boilerplate code in transaction management, authentication and authorization, and logging.



@node Transaction Management  , Service Layer
@section Transaction Management

Spring allows you to develop your Service Layer code completely independently of a specific transaction technology.  Whether
you are developing code which accesses one database, or whether you are accessing a database and a message queue
in a JTA distributed transaction; if your transactional context needs to change, all that you need to modify 
is the configuration in your Service Locator.

Spring defines an interface called the PlatformTransactionManager, for which there are multiple implementations.
These include the HibernateTransactionManager, JTATransactionManager, and others.  By having the 
PlatformTransactionManager interface, transaction management code in the Service Layer can be developed 
irregardless of the underlying transaction management scheme.

On another note, if most of the methods in each service in the Service Layer are transactional and have the same isolation
and propogation levels, dynamic proxies can be utilized to eliminate boilerplate transactional code.


@node Configuration,  , Service Layer
@section Configuration

Again, instead of using an XML-based ApplicationContext, the following is added to the Service Locator.

@smallexample
private PlatformTransactionManager _transactionManager  ;
private void initializeTransactionManager() @{
  HibernateTransactionManager hibernateTransactionManager = 
                               new HibernateTransactionManager();
  hibernateTransactionManager.setSessionFactory(
     (org.hibernate.SessionFactory)_localSessionFactoryBean.getObject());
  hibernateTransactionManager.afterPropertiesSet();
  _transactionManager = hibernateTransactionManager;
@}
public PlatformTransactionManager getTransactionManager() @{
  return _transactionManager;
@}
@end smallexample



Here we add a TransactionInterceptor to force all methods in the ATMService class to
perform in transactions, at the database's default isolation level.

@smallexample
private void addTransactionInterceptorToATM() throws AopConfigException @{
    NameMatchTransactionAttributeSource transactionAttributeSource = new NameMatchTransactionAttributeSource() ;
    DefaultTransactionAttribute transactionAttribute = new DefaultTransactionAttribute();
    transactionAttribute.setIsolationLevel(transactionAttribute.ISOLATION_DEFAULT);
    transactionAttribute.setPropagationBehavior(transactionAttribute.PROPAGATION_REQUIRED);
    transactionAttributeSource.addTransactionalMethod("*", transactionAttribute);
    TransactionInterceptor transactionInterceptor = new TransactionInterceptor();
    transactionInterceptor.setTransactionManager(_transactionManager);
    transactionInterceptor.setTransactionAttributeSource(transactionAttributeSource);
    transactionInterceptor.afterPropertiesSet();        
    ProxyFactoryBean proxyFactoryBean = new ProxyFactoryBean();
    proxyFactoryBean.addAdvice(transactionInterceptor);
    proxyFactoryBean.setTarget(_atmService);
    _atmService = (ATMService) proxyFactoryBean.getObject();        
@}
@end smallexample




@node Remoting
@chapter Remoting
@c %MENU% Remoting


Spring integrates with many different remoting technologies, such as RMI, Hessian, Burlap, and Spring's own
RMI over HTTP.  For the most part, these technologies are pretty interchangable.  However, remoting schemes such as
Hessian and Burlap that use reflection-based serialization instead of native Java serialization
fail when the domain model is persisted using Hibernate, or possibly any other bytecode-enhanced dynamic proxies.  

One of the best features of Hibernate is that
it allows a developer to fetch a specified subgraph of the persistent Domain Model object graph (thus, solving the n+1 select problem). 
If the object graph is reasonably complex, it's common for some of the objects in the fetched subgraph to reference objects that were not fetched in
the database roundtrip.  Hibernate does not model this dangling reference with a null pointer; instead, since Hibernate 
uses CGLIB's dynamic proxies, the dangling reference is a proxy object to the unfetched object in the database.  Upon
method calls to that dynamic proxy, the proxy attempts to fetch the target object from the database.  This means that if you're outside of the
Service Layer
and as such the Hibernate Session (Hibernate's Unit Of Work) is closed, an Exception will be thrown.  Thus, reflection-based
serialization techniques as employed by Hessian and Burlap fail.


RMI over HTTP is a good choice if you want to use RMI but you are behind a firewall.




@node Conclusion
@chapter Conclusion
@c %MENU% Conclusion

The Spring Framework is an excellent library for the Java programming language
whose main strengths occur in the Service Layer of enterprise application development.

This document, and all sample code can be downloaded from anonymously via subversion.

@smallexample
svn co https://atmexample.svn.sourceforge.net/svnroot/atmexample
@end smallexample

In addition to the dynamic proxy examples in this paper, it has a relatively simple
ATM application: using PostgreSQL, Hibernate, Spring, with a Swing and a JavaServer Faces
frontend.




@c Local Variables:
@c ispell-local-pdict: "ispell-dict"
@c End:
@bye

